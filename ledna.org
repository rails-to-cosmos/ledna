#+CATEGORY: ledna
#+PROPERTY: header-args:emacs-lisp :tangle ledna.el

* Examples
** TODO State Switchers
:PROPERTIES:
:*->DONE:  (message "Done!")
:*->TODO:  (message "Todo again :(")
:#*->CANCELLED: t ;; never allow switch state to CANCELLED
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2018-05-13 Sun 00:45]
- State "DONE"       from "TODO"       [2018-05-13 Sun 00:45]
- State "DONE"       from "TODO"       [2018-05-13 Sun 00:47]
- State "DONE"       from "TODO"       [2018-05-13 Sun 00:48]
- State "DONE"       from "TODO"       [2018-05-13 Sun 00:48]
:END:

* Core
** Wrapper
#+BEGIN_SRC emacs-lisp
(defun ledna-trigger-function-emacs-lisp (change-plist)
  "Trigger function work-horse.

See `org-edna-run' for CHANGE-PLIST explanation.

This shouldn't be run from outside of `org-trigger-hook'."
  (let* ((pos (plist-get change-plist :position))
         (type (plist-get change-plist :type))

         (to* (or (plist-get change-plist :to) ""))
         (from* (or (plist-get change-plist :from) ""))

         (to (cond ((symbolp to*) (symbol-name to*))
                   ((stringp to*) (substring-no-properties to*))))
         (from (cond ((symbolp from*) (symbol-name from*))
                     ((stringp from*) (substring-no-properties from*))))

         (strict-trigger (format "%s->%s" from to))
         (from-trigger (format "%s->*" from))
         (to-trigger (format "*->%s" to))
         (all-trigger "*"))

    (ledna-run change-plist
      (when-let ((forms (remove 'nil (list
                                (org-entry-get pos strict-trigger org-edna-use-inheritance)
                                (org-entry-get pos from-trigger   org-edna-use-inheritance)
                                (org-entry-get pos to-trigger     org-edna-use-inheritance)
                                (org-entry-get pos all-trigger    org-edna-use-inheritance)))))

        (mapc #'(lambda (form) (eval (read form))) forms)))))

(defun ledna-blocker-function-emacs-lisp (change-plist)
  "Trigger function work-horse.

See `org-edna-run' for CHANGE-PLIST explanation.

This shouldn't be run from outside of `org-trigger-hook'."
  (let* ((pos (plist-get change-plist :position))
         (type (plist-get change-plist :type))
         (to* (or (plist-get change-plist :to) ""))
         (from* (or (plist-get change-plist :from) ""))
         (to (cond ((symbolp to*) (symbol-name to*))
                   ((stringp to*) (substring-no-properties to*))))
         (from (cond ((symbolp from*) (symbol-name from*))
                     ((stringp from*) (substring-no-properties from*))))
         (strict-blocker (format "#%s->%s" from to))
         (from-blocker (format "#%s->*" from))
         (to-blocker (format "#*->%s" to))
         (all-blocker "#*"))

    (ledna-run change-plist
      (if-let ((forms (remove 'nil (list
                                (org-entry-get pos strict-blocker org-edna-use-inheritance)
                                (org-entry-get pos from-blocker   org-edna-use-inheritance)
                                (org-entry-get pos to-blocker     org-edna-use-inheritance)
                                (org-entry-get pos all-blocker    org-edna-use-inheritance)))))
          (not (setq org-block-entry-blocking (every (mapcar #'(lambda (form) (eval (read form))) forms))))
        t))))

(defmacro ledna-run (change-plist &rest body)
  "Run a TODO state change.

The state information is held in CHANGE-PLIST.

If the TODO state is changing from a TODO state to a DONE state, run BODY."
  (declare (indent 1))
  `(if (eq (plist-get ,change-plist :type) 'todo-state-change)
       (condition-case-unless-debug err
           ,@body
         (error
          (if (eq (car err) 'invalid-read-syntax)
              (org-edna--print-syntax-error (cdr err))
            (message "Edna Error at heading %s: %s" (org-get-heading t t t) (error-message-string err)))
          (setq org-block-entry-blocking (org-get-heading))
          ;; Block
          nil))
     t))

(defun ledna-dsl-init (&optional dsl)
  (let ((dsl (or dsl 'ledna)))
    (defvar ledna-dsl dsl "Language that edna uses for triggers and blockers.")
    (defvar ledna-dsl-trigger-handler "Org-edna custom trigger wrapper.")
    (defvar ledna-dsl-blocker-handler "Org-edna custom blocker wrapper.")

    (setq-default ledna-dsl dsl
                  ledna-dsl-trigger-handler (case dsl
                                              ('ledna #'ledna-trigger-function)
                                              ('emacs-lisp #'ledna-trigger-function-emacs-lisp))
                  ledna-dsl-blocker-handler (case dsl
                                              ('ledna #'ledna-blocker-function)
                                              ('emacs-lisp #'ledna-blocker-function-emacs-lisp)))

    (advice-add 'org-edna-trigger-function :around #'ledna-dsl-specifier-trigger)
    (advice-add 'org-edna-blocker-function :around #'ledna-dsl-specifier-blocker)))

(defun ledna-dsl-specifier-trigger (orig-fun &rest args)
  "Wrap edna's triggers.

ORIG-FUN is a trigger function called with ARGS."
  (apply ledna-dsl-trigger-handler args))

(defun ledna-dsl-specifier-blocker (orig-fun &rest args)
  "Wrap edna's blockers.

ORIG-FUN is a blocker function called with ARGS."
  (apply ledna-dsl-blocker-handler args))
#+END_SRC
** Utils
#+BEGIN_SRC emacs-lisp
(defun string-is-numeric-p (string)
  "Return non-nil if STRING is a valid numeric string.

Examples of valid numeric strings are \"1\", \"-3\", or \"123\"."
  ;; Can't use string-to-number, because it returns 0 if STRING isn't a
  ;; number, which is ambiguous.
  (numberp (car (read-from-string string))))
#+END_SRC
* Entries Manipulation
** Clone
#+BEGIN_SRC emacs-lisp
;; TODO: (ledna-clone (self)
;;        :state "TODO"
;;        :properties '(SCHEDULE TRIGGER)
;;        :insert-after (self))
;; (and (ledna-clone) (ledna-insert (org-entry-create "English Hometask" :todo "TODO" :tags "Hometask")) :after (self))

(defun ledna-clone (&rest args)
  (let* ((source                (or (plist-get args :source)       (self)))
         (todo-state            (or (plist-get args :todo-state)   "TODO"))
         (target-properties     (or (plist-get args :properties)   ()))
         ;; (insert-after          (or (plist-get args :insert-after) (self)))
         (archive-source-p      (or (plist-get args :archive)      nil))
         (cleanup-properties-p  (or (plist-get args :cleanup)      nil))

         (source-properties (org-entry-properties)))

    (when (or cleanup-properties-p archive-source-p)
      (mapc #'(lambda (property)
                (org-delete-property (car property))) source-properties))

    (org-insert-heading-respect-content)
    (insert (cdr (assoc-string "ITEM" source-properties)))

    (mapc #'(lambda (property)
              (if-let (p (assoc-string property source-properties))
                  (set-property (car p) (cdr p))
                (error (format "Property %s was not found in the source heading." property)))) target-properties)

    (set-todo-state todo-state)

    (when archive-source-p
      (mapc #'(lambda (marker)
                (save-excursion
                  (org-goto-marker-or-bmk marker)
                  (org-archive-subtree))) source))))
#+END_SRC
** Properties
#+BEGIN_SRC emacs-lisp
(defun set-property (property value &optional target)
  (dolist (mark (or target (self)))
    (org-entry-put
     mark property
     (cond ((numberp value) (number-to-string value))
           ((stringp value) value)
           (t "Unknown value type")))))

(defun get-property (property &optional target default)
  (let ((mark (cond
               (target
                (cond
                 ((listp target) (car target))
                 (t target)))
          (t (car (self))))))
    (or (org-entry-get mark property)
        default)))

(defun inc-property (property &optional val units target)
  (dolist (mark (or target (self)))
    (let* ((full-prop-value (get-property property mark "0"))
           (inc-value (cond ((and (stringp val) (string-is-numeric-p val)) (string-to-number val))
                            ((numberp val) val)
                            (t 1)))
           (prop-number (string-to-number (car (split-string full-prop-value))))
           (prop-label (or units (key-description (cdr (split-string full-prop-value)))))
           (result-value (s-trim (concat (number-to-string (+ inc-value prop-number)) " " prop-label))))
      (set-property property result-value (list mark))
      result-value)))
#+END_SRC
** State
#+BEGIN_SRC emacs-lisp
(defun get-todo-state (&optional marker)
  (let ((mark (car (or marker (self)))))
    (save-excursion
      (with-current-buffer (marker-buffer mark)
        (goto-char mark)
        (substring-no-properties (org-get-todo-state))))))

(defun set-todo-state (state &optional marker)
  (let ((mark (car (or marker (self)))))
    (save-mark-and-excursion
      (with-current-buffer (marker-buffer mark)
        (goto-char mark)
        (org-todo state)))))
#+END_SRC
** Selectors
*** Self
#+BEGIN_SRC emacs-lisp
(defun self ()
  (save-excursion
    (goto-char (org-entry-beginning-position))
    (list (point-marker))))
#+END_SRC
*** Ids
#+BEGIN_SRC emacs-lisp
(defun ids (&rest ids)
  "Find a list of headings with given IDS.

Edna Syntax: ids(ID1 ID2 ...)

Each ID is a UUID as understood by `org-id-find'.

Note that in the edna syntax, the IDs don't need to be quoted."
  (mapcar (lambda (id) (org-id-find id 'marker)) ids))
#+END_SRC
*** Tags
#+BEGIN_SRC emacs-lisp
(defun tags (match-spec &optional scope skip)
  "Find entries using Org matching.

Edna Syntax: match(\"MATCH-SPEC\" SCOPE SKIP)

MATCH-SPEC may be any valid match string; it is passed straight
into `org-map-entries'.

SCOPE and SKIP are their counterparts in `org-map-entries'.
SCOPE defaults to agenda, and SKIP defaults to nil.

,* TODO Test
  :PROPERTIES:
  :BLOCKER:  match(\"test&mine\" agenda)
  :END:

\"Test\" will block until all entries tagged \"test\" and
\"mine\" in the agenda files are marked DONE."
  (setq scope (or scope 'agenda))
  (org-map-entries
   ;; Find all entries in the agenda files that match the given tag.
   (lambda nil (point-marker))
   match-spec scope skip))
#+END_SRC
*** Select
#+BEGIN_SRC emacs-lisp
(defun select (&rest markers)
  (apply #'append markers))
;; (select (ids "test-pass-purchased-p") (tags "test_tag"))
#+END_SRC
** Scheduling
#+BEGIN_SRC emacs-lisp
;; (set-keyword "SCHEDULED" (active-timestamp (get-nearest-date (cdr (read (get-property "SCHEDULE" (car (ids "test-event"))))))) (select (ids "test-event")))
;; (set-scheduled (get-nearest-date (cdr (read (get-property "SCHEDULE" (car (ids "test-event")))))) (select (ids "test-event")))
;; (active-timestamp (get-nearest-date (cadr (read (get-property "SCHEDULE" (car (ids "test-event")))))))
;; (get-nearest-date (list "Mon 09:00" "Mon 10:00" "Mon 12:00" "Mon 21:00" "Tue 17:00-18:00" "Thu 17:00-18:00" "Sat 13:00-14:00"))
;; (- (org-time-string-to-seconds (active-timestamp "Mon 09:00")) (time-to-seconds (org-current-time)))

(defun set-scheduled (timestamp &optional marker)
  (let ((mark (or marker (self))))
    (save-mark-and-excursion
     (cl-labels
      ((set-scheduled-on (mts)
                         (let ((pom (car mts)) (ts (cdr mts)))
                           (with-current-buffer
                               (marker-buffer pom)
                             (goto-char pom)
                             (org-add-planning-info 'scheduled ts)
                             ts))))
    (mapcar #'set-scheduled-on (-zip mark (-repeat (length mark) timestamp)))))))

(defun get-nearest-date (times)
  (cl-flet* ((diff (time)
                   (let* ((current-sec (time-to-seconds (org-current-time)))
                          (target-sec (org-time-string-to-seconds (active-timestamp time)))
                          (diff-sec (- target-sec current-sec)))
                     (cond ((and (> diff-sec 0) (< diff-sec 604800)) diff-sec)
                           ((< diff-sec 0) (+ diff-sec 604800))
                           ((> diff-sec 604800) (- diff-sec 604800)))))
             (comparator (a b) (< (diff a) (diff b))))
    (let ((nearest-date (car (sort times #'comparator))))
      nearest-date)))

(defun active-timestamp (str)
  (let* ((default-time (org-current-time))
         (decoded-time (decode-time default-time nil))
         (analyzed-time (org-read-date-analyze str default-time decoded-time))
         (encoded-time (apply #'encode-time analyzed-time)))
    (format-time-string (org-time-stamp-format t) encoded-time)))

(defun inactive-timestamp (str)
  (let* ((default-time (org-current-time))
         (decoded-time (decode-time default-time nil))
         (analyzed-time (org-read-date-analyze str default-time decoded-time))
         (encoded-time (apply #'encode-time analyzed-time)))
    (format-time-string (org-time-stamp-format t t) encoded-time)))
#+END_SRC
* Defaults
** Reports
#+BEGIN_SRC emacs-lisp
(defmacro ledna-counter (countable counter &optional target unit)
  `(when-let (inc (get-property ,countable ,target))
     (inc-property ,counter inc ,unit ,target)))

(defun ledna-price-counter (&optional target unit)
  (ledna-counter "PRICE" "MONEY-SPENT" target unit))

(defun ledna-time-counter (&optional target)
  (ledna-counter "DURATION" "TIME-SPENT" target "hours"))

(defun ledna-advanced-schedule (&optional target)
  (when-let (schedule-prop (get-property "SCHEDULE"))
    (let* ((schedule (cadr (read schedule-prop)))
           (next-time (get-nearest-date schedule)))
      (set-scheduled next-time target)
      (set-todo-state "TODO" target)
      (org-entry-put nil "LAST_REPEAT" (format-time-string
					      (org-time-stamp-format t t)
					      (current-time))))))

(defun ledna-money-time-report (&optional target)
  (ledna-time-counter target)
  (ledna-price-counter target))

(defun ledna-touch (&optional target)
  (set-scheduled (active-timestamp "now") target)
  (set-todo-state "TODO" target))
#+END_SRC
* Provide
#+BEGIN_SRC emacs-lisp
(provide 'ledna)
#+END_SRC
* COMMENT Local Variables
# Local Variables:
# firestarter: (org-babel-tangle)
# End:
